{"version":3,"sources":["components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","time","paused","start","stop","onTick","divWidth","className","onClick","style","height","backgroundColor","width","transition","App","state","step","tick","setState","changeHandler","e","target","value","startTimer","interval","setInterval","clearInterval","stopTimer","this","onBlur","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8PA2BeA,G,MAzBD,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,OAAQC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SAIlD,OAHKJ,GACHG,EAAOJ,GAGP,6BACE,4BAAKA,GACL,4BACEM,UAAWL,EAAS,SAAW,GAC/BM,QAASN,EAASC,EAAQC,GAEzBF,EAAS,QAAU,SAEtB,yBACEO,MAAO,CACLC,OAAQ,MACRC,gBAAiB,MACjBC,MAAM,QAAD,OAAUX,EAAV,qBAA2BK,EAA3B,KACLO,WAAY,WChBDC,E,4MACnBC,MAAQ,CACNd,KAAM,GACNC,QAAQ,EACRc,KAAM,IACNV,SAAU,I,EAGZW,KAAO,WACL,EAAKC,SAAS,CAAEjB,KAAM,EAAKc,MAAMd,KAAO,K,EAG1CkB,cAAgB,SAACC,GACX,EAAKL,MAAMb,QACb,EAAKgB,SAAS,CACZjB,MAAOmB,EAAEC,OAAOC,MAChBhB,UAAWc,EAAEC,OAAOC,S,EAK1BC,WAAa,WACX,EAAKC,SAAWC,aAAY,WACtB,EAAKV,MAAMd,MACb,EAAKiB,SAAS,CAAEjB,KAAM,EAAKc,MAAMd,KAAO,IAEtC,EAAKc,MAAMd,KAAO,IACpByB,cAAc,EAAKF,UACnB,EAAKN,SAAS,CAAEhB,QAAQ,OAEzB,EAAKa,MAAMC,MACd,EAAKE,SAAS,CAAEhB,QAAQ,K,EAG1ByB,UAAY,WACVD,cAAc,EAAKF,UACnB,EAAKN,SAAS,CAAEhB,QAAQ,K,kEAIxB0B,KAAKL,e,+BAIL,OACE,6BACE,2BAAOM,OAAQD,KAAKT,gBACpB,kBAAC,EAAD,CACEd,OAAQ,SAACJ,GAAD,OAAU6B,QAAQC,IAAR,qBAA0B9B,KAC5CA,KAAM2B,KAAKb,MAAMd,KACjBC,OAAQ0B,KAAKb,MAAMb,OACnBC,MAAOyB,KAAKL,WACZnB,KAAMwB,KAAKD,UACXrB,SAAUsB,KAAKb,MAAMT,gB,GArDE0B,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.479e887a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Timer = ({ time, paused, start, stop, onTick, divWidth }) => {\n  if (!paused) {\n    onTick(time);\n  }\n  return (\n    <div>\n      <h1>{time}</h1>\n      <button\n        className={paused ? \"paused\" : \"\"}\n        onClick={paused ? start : stop}\n      >\n        {paused ? \"Start\" : \"Pause\"}\n      </button>\n      <div\n        style={{\n          height: \"5px\",\n          backgroundColor: \"red\",\n          width: `calc(${time} * (100% /${divWidth})`,\n          transition: \"1s\",\n        }}\n      ></div>\n    </div>\n  );\n};\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Timer from \"./components/Timer\";\n\nexport default class App extends Component {\n  state = {\n    time: 60,\n    paused: true,\n    step: 1000,\n    divWidth: 60,\n  };\n\n  tick = () => {\n    this.setState({ time: this.state.time - 1 });\n  };\n\n  changeHandler = (e) => {\n    if (this.state.paused) {\n      this.setState({\n        time: +e.target.value,\n        divWidth: +e.target.value,\n      });\n    }\n  };\n\n  startTimer = () => {\n    this.interval = setInterval(() => {\n      if (this.state.time) {\n        this.setState({ time: this.state.time - 1 });\n      }\n      if (this.state.time < 1) {\n        clearInterval(this.interval);\n        this.setState({ paused: true });\n      }\n    }, this.state.step);\n    this.setState({ paused: false });\n  };\n\n  stopTimer = () => {\n    clearInterval(this.interval);\n    this.setState({ paused: true });\n  };\n\n  componentDidMount() {\n    this.startTimer();\n  }\n\n  render() {\n    return (\n      <div>\n        <input onBlur={this.changeHandler}></input>\n        <Timer\n          onTick={(time) => console.log(`Time left: ${time}`)}\n          time={this.state.time}\n          paused={this.state.paused}\n          start={this.startTimer}\n          stop={this.stopTimer}\n          divWidth={this.state.divWidth}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}